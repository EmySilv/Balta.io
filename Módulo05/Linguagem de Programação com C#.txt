Notas Importantes
  - não utilizar caracteres especial ou espaço
  - utilizar camnhos curtos
  - evitar caminhos de rede
  - c# é case sensitive, diferencia maiuscula de minuscula.
______________________________________________________________________________
  Escopo de um Programa
  - é tudo que um programa tem para ser executado
    - no .net temos:
      - importações doq usaremos, definidas pelo USING;
      - namespace que são separações lógicas
      - classe
      - método principal
  ______________________________________________________________________________
  Namespace
  - divisão lógica
  - não podemos ter duas classescom mesmo nome em um namespace
  - recomendado ter um namespace e uma classe por arquivo
  - escopo do namespace é definido entre chaves, assim como classes e metodos
  - um namespace pode ser reutilizado, estando presente em varios arquivos
  - mesmo namespace e a classe diferente pode ter, só n o mesmo namespace e a mesma classe.
  - pode se ter um namespace dentro do outro usando o "."
  - pode se ser usado um namespace dentro de outro, fazendo a importação pelo USING;
  - durante a compilação os arquivos c# são unificados e a divisão fisica se perde e oq sobra é a divisão lógica. Formando uma DLL só
  ______________________________________________________________________________
  Using
  - a importação define as bibliotecas que o programa usará
  - o basico vem como padrão
  - palavra USING para esssa importação
  - serve tb para organizar o codigo em namespace
  - usar e abusar da criação de arquivos e namespace
______________________________________________________________________________
  Variaveis
  - utilizada para guardar informação
  - criação é instanciar, de modo técnico
  - pode ser usado um tipo ou a palavra reservada cvar para criar uma variavel
  - var é uma forma de evvitar escrecer o tipo da variavel
______________________________________________________________________________
  Constantes 
  - parecida com o conceito de variavel, mas não podem ser alteradas 
  - definida pelo const antes do tipo.
  - sem valor definido, ela inicia com 0
  - constantes em maiúsculo, separadopor "_"
______________________________________________________________________________
  Palavras Reservadas
  - keywords
  - exclusivos do c#
  - não podemos usar essas palavras reservadas
______________________________________________________________________________
  Comentários  
  - pode ser feita em:
      - uma linha;
      //
      
      - multiplas linhas;
      /*
      
      - XML (MetaData): dados adicionais da classe
      ///
      
  - no vscode 'ctrl + k + c' comenta, e 'ctrl + k + u' tira o comentário.
______________________________________________________________________________
  Tipos Primitivos(built-in types)
  - são os tipos bases do dotnet, inteiros, caracteres, cadeia de caractere, ponto flutuante
  - definir de forma correta melhora a execução
  - Value Types
  - Classificados em:
    - Tipos Simples (Simple Types)
    - Enumerados (Enums)
    - Estruturas (Structs)
    - Tipos Nulos (Nullable Types)
  - cada tipo tem a sua capacidade
______________________________________________________________________________
  System
  - tipo base/raiz
  - todos os outro itens do.net derivam do System
______________________________________________________________________________
  Byte
  - utilizado pra representar um byte, de fato
  - tb chamado de byte array
  - sbyte (Signed Byte) permite valor negativo
______________________________________________________________________________
  Números Inteiros
  - sempontuação, definidos por:
    - short/ushort (16-bit)
    - int/uint (32-bit)
    - long/ulong (64-bit)
  sendo o 'u' significando UNSIGNED (sem sinal), não podendo receber valores negativos
______________________________________________________________________________
  NÚmeros Reais
  - numeros com ponto flutuante
  - defeinidos por:
    - float (32-bit)
    - double (64-bit)
    - decimal (128-bit)
  - pra definir um float colocamos um 'f' no final e o decimal um 'm' no final, pois a conversão padrão é do double
______________________________________________________________________________
  Boolean
  - armazena true or false
    - bool (8-bit)
______________________________________________________________________________
  Char
  - armazena somente um caractere no formato Unicode;
    - char (16-bit);
  - atribuição por aspas simoples, ex 'D';
______________________________________________________________________________
  String
  - armazena uma cadeia de caracteres;
    - string (?), depende da quantidade de caractere;
  - atribuição por aspas duplas;
  - podendo ser considerada uma lista de char;
______________________________________________________________________________
  Var
  - substitui o nome de um tipo
  - primeiro valor atribuido é que dá o tipo;
  - atalho para o nome da variavel;
  - não serve pra quando não sabemos o tipo do dado;
______________________________________________________________________________
  Object
  - tipo genérico que recebe qualquer valor ou objeto, pode ser qualquer coisa;
  - tipo um var;
  - não tem intelisence;
  - tipo desconhecido;
______________________________________________________________________________
  Nullable Types
  - Null
    - significa vazio
    - nulo é pra definiçaõ de tipo
    - diferente de zero ou uma  string vazia
    - atribuindo null a um objeto ele ficará vazio
    - feita com uma interrogaçaõ na frente de um tipo
      ex: int? idade = null;
______________________________________________________________________________
  Alias
  - apelido que todo tipo no .net tem
  - nao é exclusivo do .net
  - um exemplo de alias é o 'string' que é um apelido de 'String'
  - c# é case sensitive, tanto faz escrever um ou outro
  - o recomendado é usar os alias
      - com alias escrevemos menos, ex:
      int idade = 25; (alias)
      Int32 idade = 25:
______________________________________________________________________________
  Valores Padrões
  - .net sempre vem com um valor padrão
  - tipos built-in tem valor padrão
  - se não houver especificcação, o valor padrão é zero
    - int = 0
    - float = 0 
    - decimal = 0 
    - bool = false
    - char = '\0'
    - String => ""
______________________________________________________________________________
  Conversão Implícita
  - existem dois tipos de conversão implicitas e explicitas
  - as implicitas são conversões que podem ser executadas apenas com dados e dados compatives
   ex:
      float valor = 28.8f;
      int outro = 25;
      
      valor = outro; // conversão implícita
  - só ocorre se os tipos e tamnanho for compativel caso contrário não dá
______________________________________________________________________________
  Conversão Explicita
  - obrigatoriamente informar o tipo que sera convertido, acontece quando os tiposs não são compativeis
  - conversão se dá pelo parentese

______________________________________________________________________________
